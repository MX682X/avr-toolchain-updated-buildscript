diff -ur gcc/gcc/config/avr/avr.cc gcc-7.3.0-patched/gcc/config/avr/avr.cc
--- gcc/gcc/config/avr/avr.cc	2017-08-22 09:55:34.767308000 +0200
+++ gcc-7.3.0-patched/gcc/config/avr/avr.cc	2018-12-03 11:05:34.994764831 +0100
@@ -54,6 +55,8 @@
 #include "builtins.h"
 #include "context.h"
 #include "tree-pass.h"
+#include "vec.h"
+#include "opts.h"
 #include "print-rtl.h"
 #include "rtl-iter.h"

@@ -981,6 +1050,15 @@
   return avr_lookup_function_attribute1 (func, "interrupt");
 }
 
+/* Return nonzero if FUNC is an nmi function as specified
+   by the "nmi" attribute.  */
+
+static int
+avr_nmi_function_p (tree func)
+{
+  return avr_lookup_function_attribute1 (func, "nmi");
+}
+
 /* Return nonzero if FUNC is a signal function as specified
    by the "signal" attribute.  */
 
@@ -1034,25 +1112,34 @@
   cfun->machine->is_naked = avr_naked_function_p (decl);
   cfun->machine->is_signal = avr_signal_function_p (decl);
   cfun->machine->is_interrupt = avr_interrupt_function_p (decl);
+  cfun->machine->is_nmi = avr_nmi_function_p (decl);
   cfun->machine->is_OS_task = avr_OS_task_function_p (decl);
   cfun->machine->is_OS_main = avr_OS_main_function_p (decl);
   cfun->machine->is_no_gccisr = avr_no_gccisr_function_p (decl);
 
-  isr = cfun->machine->is_interrupt ? "interrupt" : "signal";
+  if (cfun->machine->is_interrupt)
+    isr = "interrupt";
+  else if (cfun->machine->is_nmi)
+    isr = "nmi";
+  else
+    isr = "signal";
 
   /* Too much attributes make no sense as they request conflicting features. */
 
    if (cfun->machine->is_OS_task
-      + && (cfun->machine->is_signal || cfun->machine->is_interrupt))
+      + && (cfun->machine->is_signal || cfun->machine->is_interrupt 
+          || cfun->machine->is_nmi) > 1)
    error_at (loc, "function attributes %qs and %qs are mutually exclusive",
               "OS_task", isr);
    
    if (cfun->machine->is_OS_main
-      + && (cfun->machine->is_signal || cfun->machine->is_interrupt))
+      + && (cfun->machine->is_signal || cfun->machine->is_interrupt 
+          || cfun->machine->is_nmi) > 1)
    error_at (loc, "function attributes %qs and %qs are mutually exclusive",
              "OS_main", isr);
 
-  if (cfun->machine->is_interrupt || cfun->machine->is_signal)
+  if (cfun->machine->is_interrupt || cfun->machine->is_signal 
+          || cfun->machine->is_nmi)
     {
       tree args = TYPE_ARG_TYPES (TREE_TYPE (decl));
       tree ret = TREE_TYPE (TREE_TYPE (decl));

@@ -2356,7 +2642,7 @@
   if (CONST == GET_CODE (x))
     x = XEXP (XEXP (x, 0), 0);
 
-  if (SYMBOL_REF_P (x))
+  if (SYMBOL_REF == GET_CODE (x))
     return SYMBOL_REF_FLAGS (x) & AVR_SYMBOL_FLAG_TINY_ABSDATA;
 
   if (CONST_INT_P (x)
   
@@ -3899,6 +3985,48 @@
   return "";
 }
 
+/*
+The range check is needed only if the device has SRAM greater than
+LDS/STS range. Only attiny40 has that much SRAM and needs special
+consideration. Also include avrtiny, as code compiled for avrtiny is
+supposed to work for all devices in the arch.
+*/
+static bool tiny_device_has_out_of_range_sram ()
+{
+    return AVR_TINY &&
+        (strcmp (avr_mmcu, "attiny40") == 0
+         ||  strcmp (avr_mmcu, "avrtiny") == 0);
+}
+
+/*
+AVRTC-579
+if operand is symbol or constant expression with value > 0xbf
+  return false, otherwise true
+This check is used to avoid lds/sts instruction with invalid memory
+access range (valid range 0x40..0xbf). For io operand range 0x0..0x3f,
+in/out instruction will be generated.
+*/
+bool tiny_valid_direct_memory_access_range(rtx op, enum machine_mode mode)
+{
+  rtx x;
+
+  if (!AVR_TINY)
+    return true;
+
+  x = XEXP(op,0);
+
+  if (MEM_P(op) && x && (GET_CODE(x) == SYMBOL_REF))
+  {
+    return !tiny_device_has_out_of_range_sram ();
+  }
+  if (MEM_P(op) && x && (CONSTANT_ADDRESS_P (x)) &&
+     !(IN_RANGE (INTVAL (x), 0, 0xC0 - GET_MODE_SIZE (mode))))
+  {
+    return false;
+  }
+
+  return true;
+}
 
 const char*
 output_movqi (rtx_insn *insn, rtx operands[], int *plen)
 
@@ -9865,6 +9993,8 @@
   { "interrupt", 0, 0, true,  false, false, false,
     avr_handle_fndecl_attribute, NULL },
+  { "nmi",       0, 0, true,  false, false, false,
+    avr_handle_fndecl_attribute, NULL },
   { "no_gccisr", 0, 0, true,  false, false, false,
     avr_handle_fndecl_attribute, NULL },
     
@@ -10448,8 +10608,8 @@
       && decl
       && VAR_DECL == TREE_CODE (decl)
       && MEM_P (rtl)
-      && SYMBOL_REF_P (XEXP (rtl, 0)))
+      && SYMBOL_REF == GET_CODE (XEXP (rtl, 0)))
     {
       rtx sym = XEXP (rtl, 0);
       bool progmem_p = -1 == avr_progmem_p (decl, DECL_ATTRIBUTES (decl));
 
 
@@ -10773,7 +10937,11 @@
       return true;
 
     case MEM:
-      *total = COSTS_N_INSNS (GET_MODE_SIZE (mode));
+      /* MEM rtx with non-default address space is more
+         expensive. Not expressing that results in reg
+         clobber during expand (PR 65657). */
+      *total = COSTS_N_INSNS (GET_MODE_SIZE (mode)
+                  + (MEM_ADDR_SPACE(x) == ADDR_SPACE_RAM ? 0 : 5));
       return true;
 
     case NEG:

diff -ur gcc/gcc/config/avr/avr.h gcc-7.3.0-patched/gcc/config/avr/avr.h
--- gcc/gcc/config/avr/avr.h	2017-01-16 10:48:45.991005000 +0100
+++ gcc-7.3.0-patched/gcc/config/avr/avr.h	2018-11-29 15:40:15.268967655 +0100
@@ -153,6 +153,8 @@
 #define SIZE_TYPE (INT_TYPE_SIZE == 8 ? "long unsigned int" : "unsigned int")
 #define PTRDIFF_TYPE (INT_TYPE_SIZE == 8 ? "long int" :"int")
 
+#define WCHAR_TYPE "int"
+#define WINT_TYPE "int"
 #define WCHAR_TYPE_SIZE 16
 
 #define FIRST_PSEUDO_REGISTER 37
 
@@ -563,6 +560,10 @@
   /* 'true' - if current function is a signal function 
      as specified by the "signal" attribute.  */
   int is_signal;
+
+  /* 'true' - if current function is an nmi function 
+     as specified by the "nmi" attribute.  */
+  int is_nmi;
   
   /* 'true' - if current function is a 'task' function 
      as specified by the "OS_task" attribute.  */



diff -ur gcc/gcc/ira.cc gcc-7.3.0-patched/gcc/ira.cc
--- gcc/gcc/ira.cc	2017-10-18 23:13:16.833810000 +0200
+++ gcc-7.3.0-patched/gcc/ira.cc	2018-11-29 15:40:16.902301000 +0100
@@ -5068,7 +5068,10 @@
   auto_bitmap need_new, reachable;
   vec<basic_block> queue;
 
-  if (!SHRINK_WRAPPING_ENABLED)
+	/* Restore 4.9 behavior of splitting live range even if target does
+		 not have simple_return. This helps fix code size increase for the
+		 avr target - see AVRTC-804 */
+  if (!flag_shrink_wrap)
     return false;
 
   queue.create (n_basic_blocks_for_fn (cfun));


diff -ur gcc/gcc/tree.h gcc-7.3.0-patched/gcc/tree.h
--- gcc/gcc/tree.h	2017-11-29 23:13:34.210836000 +0100
+++ gcc-7.3.0-patched/gcc/tree.h	2018-11-29 15:40:24.152301052 +0100
@@ -21,6 +21,7 @@
 #define GCC_TREE_H
 
 #include "tree-core.h"
+#include "machmode.h"
 
 /* Convert a target-independent built-in function code to a combined_fn.  */
 
